version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: billboard-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-billboard123}
      MONGO_INITDB_DATABASE: billboard_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - billboard-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: billboard-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - billboard-network

  # Backend API
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: billboard-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:${MONGODB_PASSWORD:-billboard123}@mongodb:27017/billboard_db?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      AI_SERVICE_URL: http://ai-service:8000
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./uploads:/app/uploads
    networks:
      - billboard-network

  # AI Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: billboard-ai
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      BACKEND_API_URL: http://backend-api:5000
    ports:
      - "8000:8000"
    volumes:
      - ./ai-models:/app/models
      - ./temp-images:/app/temp
    networks:
      - billboard-network

  # Web Dashboard
  web-dashboard:
    build:
      context: ./web-dashboard
      dockerfile: Dockerfile
    container_name: billboard-dashboard
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_AI_SERVICE_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend-api
    networks:
      - billboard-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: billboard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend-api
      - web-dashboard
    networks:
      - billboard-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  billboard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
